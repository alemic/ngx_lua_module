
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#error_log  logs/error.log  debug;

include  lua_modules.conf;

lua_set_directive  lua_cache name=bytecode size=10M expire=30m;
lua_set_directive  lua_dbd name=dbpool size=1M;
lua_set_directive  lua_session mode=single name=session size=1M;

lua_set_directive  lua_autorun name=autorun size=1M;
lua_set_directive  lua_autorun_script_file  "html/test_autorun.lua";


events {
    use  iocp;
    worker_connections  128;

    iocp_events              4;
    iocp_post_acceptex       32;
    iocp_post_udp_recv       32;
    #iocp_concurrent_threads  4;
}


udp {
    server {
        listen    localhost:8080;
        protocol  lua;

        lua_udp_script_file  html/test_log_server.lua;
        lua_udp_script_parser  "default";
    }
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    #aio  on;

    #sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    lua_http_log  on;
    lua_http_log_script_file  html/test_log_client.lua;

    server {
        listen       8080;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        root  html;

        location / {
            #index  index.html index.htm index.lsp;
            autoindex  on;
        }

        location ~ \.lsp$ {
            lua_http;
            #lua_http_script_file  html/test_udp_server.lsp;
            #lua_http_script_code  "local print = print print('test!!!!!!')";

            #lua_http_script_parser  "lsp";
            #lua_http_script_parser  "default";
        }

        location ~ \.lua$ {
            lua_http;
            lua_http_script_parser  "default";

            if ($uri = /test_log_query.lua) {
                lua_http_log  off;
            }
        }

        location /announce {
            lua_http;
            lua_http_script_parser  "default";

            lua_http_script_code  "
                local nginx = nginx
                local log = nginx.logger
                local http_srv = nginx.http_srv
                local req = http_srv.request

                log.error(log.ALERT, 'bt-tracker http announce')

                log.error(log.ALERT, req['info_hash'])
                log.error(log.ALERT, req['peer_id'])
                log.error(log.ALERT, req['port'])
                log.error(log.ALERT, req['uploaded'])
                log.error(log.ALERT, req['downloaded'])
                log.error(log.ALERT, req['left'])
                log.error(log.ALERT, req['numwant'])
                log.error(log.ALERT, req['compact'])
                log.error(log.ALERT, req['no_peer_id'])
                log.error(log.ALERT, req['key'])
                log.error(log.ALERT, req['event'])

                -- BitComet
                --log.error(log.ALERT, req['natmapped'])
                --log.error(log.ALERT, req['localip'])
                --log.error(log.ALERT, req['port_type'])

                -- uTorrent
                --log.error(log.ALERT, req['corrupt'])
            ";
        }

        location /stub_status {
            stub_status  on;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
